#!/bin/bash
# stty -ixon # Disable ctrl-s and ctrl-q.

shopt -s autocd #Allows you to cd into directory merely by typing the directory name.
shopt -s checkwinsize

# Avoid duplicates
# HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
# shopt -s histappend

HISTSIZE= HISTFILESIZE= # Infinite history.

export PROMPT_COMMAND=hexgnu_prompt

function termwide {
local GRAY="\[\033[1;30m\]"
local LIGHT_GRAY="\[\033[0;37m\]"
local WHITE="\[\033[1;37m\]"
local NO_COLOUR="\[\033[0m\]"
local CYAN="\[\033[0;36m\]"
local LIGHT_CYAN="\[\033[1;36m\]"
local NO_COLOR="\[\033[0m\]"
local MAGENTA="\[\033[1;35m\]"

local LIGHT_BLUE="\[\033[1;34m\]"
local YELLOW="\[\033[1;33m\]"

case $TERM in
    xterm*)
        TITLEBAR='\[\033]0;\u@\h:\w\007\]'
        ;;
    *)
        TITLEBAR=""
        ;;
esac

PS1="$TITLEBAR\
$MAGENTA\${PWD}\
$YELLOW (\$(date +%H:%M))\
$LIGHT_GRAY \$${LIGHT_GRAY} "

PS2="$LIGHT_CYAN-$CYAN-$GRAY-$NO_COLOUR "

}

termwide

function hcat {
	highlight --out-format=ansi $* 2> /dev/null || /usr/bin/cat $*
}

export EDITOR="nvim"
export VISUAL="nvim"

export TERM='xterm-256color'
alias diff="diff --color=auto" \
      dnf="sudo dnf" \
      docker-compose='podman-compose' \
      docker='sudo -E podman' \
      gb="git branch | grep '*' | cut -d ' ' -f 2" \
      grep="grep --color=auto" \
      ls="ls --color=auto" \
      pbcopy='xclip -selection clipboard' \
      pbpaste='xclip -selection clipboard -o'

command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d" # Use neovim for vim if present.

if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash &> /dev/null
fi

# This fixes the gpg2 problems I was encountering
if [ -e /run/user/1000/gnupg/S.gpg-agent.ssh ] && [ -n "$(pgrep gpg-agent)" ]; then
    SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh; export SSH_AUTH_SOCK;
    GPG_AGENT_INFO=/run/user/1000/gnupg/S.gpg-agent:0:1; export GPG_AGENT_INFO;
else
    eval $(gpg-agent --daemon --enable-ssh-support) &> /dev/null
fi

export GPG_TTY=$(tty)

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/hexgnu/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/hexgnu/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/hexgnu/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/hexgnu/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

_direnv_hook() {
  local previous_exit_status=$?;
  trap -- '' SIGINT;
  eval "$("/usr/bin/direnv" export bash)";
  trap - SIGINT;
  return $previous_exit_status;
};
if ! [[ "${PROMPT_COMMAND:-}" =~ _direnv_hook ]]; then
  PROMPT_COMMAND="_direnv_hook${PROMPT_COMMAND:+;$PROMPT_COMMAND}"
fi

function ips() {
    aws ec2 describe-instances --region us-west-2 --query "Reservations[].Instances[].PrivateIpAddress" --filters "Name=instance-state-name,Values=running" "Name=tag:aws:autoscaling:groupName,Values=dev-asg-$1" --output text | ruby -npe '$_.scan(/((\d+)\.(\d+)\.(\d+)\.(\d+))/).each(&:shift).map {|ip| "ip-" + ip.join("-") }'
}

function hosts() {
    ips $1 | ruby -npe '$_ = $_.scan(/((\d+)\.(\d+)\.(\d+)\.(\d+))/).each(&:shift).map {|ip| "ip-" + ip.join("-")}.join("   ") + "\n"'
}

export PATH=$PATH:/opt/Azure-function:/home/hexgnu/go/bin

PATH=$PATH:/home/hexgnu/.cargo/bin
# PATH=$PATH:/home/hexgnu/go/bin
# source "$HOME/.cargo/env"
eval "$(~/.rbenv/bin/rbenv init - bash)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
export AWS_PROFILE=augment-developer

. "$HOME/.local/bin/env"
